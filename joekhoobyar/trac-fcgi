#!/bin/sh
#
# Description:	Directly manages a tracfcgi instance as a High-Availability OCF resource
#								agent running on a Heartbeat/LinuxHA cluster.
#
# Author:		Joe Khoobyar <joe@ankhcraft.com>
# License:	GNU General Public License (GPL) version 2
# Copyright (c) 2009 All Rights Reserved
#
#
# See usage() function below for more details...
#
# OCF instance parameters:
#   OCF_RESKEY_tracfcgi
#   OCF_RESKEY_projectroot
#		OCF_RESKEY_pid
#   OCF_RESKEY_renice

#######################################################################
# Initialization:

. ${OCF_ROOT:-/usr/lib/ocf}/resource.d/heartbeat/.ocf-shellfuncs
. $(dirname $0)/jk-shellfuncs

#######################################################################

TRACFCGI_which=$(which trac.fcgi 2>/dev/null)
: ${TRACFCGI_which=/usr/share/trac/cgi-bin/trac.fcgi}
: ${OCF_RESKEY_tracfcgi=$TRACFCGI_which}
: ${OCF_RESKEY_pid="/var/run/trac/trac-fcgi.pid"}

usage() {
cat <<END

usage: $0 (start|stop|status|monitor|meta-data|validate-all)

$0 manages tracfcgi as an OCF resource.

The 'start' operation starts tracfcgi.
The 'stop' operation stops tracfcgi.
The 'status' operation reports whether tracfcgi is running.
The 'monitor' operation reports whether tracfcgi seems to be working.
The 'meta-data' operation reports the configuration options.
The 'validate-all' operation reports whether the parameters are valid.

END
}

meta_data() {
cat <<END
<?xml version="1.0" ?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="tracfcgi">
    <version>1.0</version>
      <longdesc lang="en">This is an OCF resource agent for the tracfcgi daemon</longdesc>
      <shortdesc lang="en">OCF resource agent for tracfcgi</shortdesc>
      <parameters>
				<parameter name="tracfcgi" required="1">
					<longdesc lang="en">
						Full path to the tracfcgi executable.
					</longdesc>
					<shortdesc>tracfcgi executable</shortdesc>
					<content type="string" default="$TRACFCGI_which"/>
				</parameter>
				<parameter name="projectroot" required="1" unique="0">
					<longdesc lang="en">
						Full path to the project directory for this instance.
					</longdesc>
					<shortdesc>project root</shortdesc>
					<content type="string" default=""/>
				</parameter>
				<parameter name="pid" required="1">
					<longdesc lang="en">
						Full path to the PID file that this instance should use.
					</longdesc>
					<shortdesc>PID file</shortdesc>
					<content type="string" default="/var/run/tracfcgi.pid"/>
				</parameter>
				<parameter name="pid_owner" required="0">
					<longdesc lang="en">
						User who should own the PID file.
					</longdesc>
					<shortdesc>PID file owner</shortdesc>
					<content type="string" default=""/>
				</parameter>
				<parameter name="pid_group" required="0">
					<longdesc lang="en">
						Group which should own the PID file.
					</longdesc>
					<shortdesc>PID file group</shortdesc>
					<content type="string" default=""/>
				</parameter>
				<parameter name="renice" required="0">
					<longdesc lang="en">
						Optional value to pass to renice tracfcgi with after starting it.
					</longdesc>
					<shortdesc>renice value</shortdesc>
					<content type="string" default=""/>
				</parameter>
		</parameters>
    <actions>
      <action name="start" timeout="30" />
      <action name="stop" timeout="30" />
      <action name="status" timeout="20" />
      <action name="monitor" depth="0" start-delay="10" interval="10" timeout="30" />
      <action name="meta-data" timeout="5" />
      <action name="validate-all" timeout="5" />
   </actions>
</resource-agent>

END
}

TRACFCGI="env TRAC_ENV=$OCF_RESKEY_projectroot start-stop-daemon --start -b -m -p $OCF_RESKEY_pid -x $OCF_RESKEY_tracfcgi"

tracfcgi_validate() {
	jk_assert_executable "$OCF_RESKEY_tracfcgi"
	jk_assert_directory "$OCF_RESKEY_projectroot"
}

tracfcgi_status() {
	jk_resource_status_by_pid 'tracfcgi'
}

tracfcgi_monitor() {
	jk_resource_monitor_by_pid 'tracfcgi'
}

tracfcgi_start() {
	jk_resource_exit_if_started_by_pid 'tracfcgi'

	jk_pidfile_prepare &&
		jk_resource_start_by_command 'tracfcgi' "$TRACFCGI"
}

tracfcgi_stop() {
	jk_resource_stop_by_pid 'tracfcgi'
}

# What kind of method was invoked?
case "$1" in
  start)	tracfcgi_validate; tracfcgi_start;;
  stop)		tracfcgi_stop;;
  status)	tracfcgi_status;;
  monitor)	tracfcgi_monitor;;
  meta-data)	meta_data; exit $OCF_SUCCESS;;
  validate-all)	tracfcgi_validate; exit $OCF_SUCCESS;;
  *)		usage; exit $OCF_ERR_UNIMPLEMENTED;;
esac
exit $?
