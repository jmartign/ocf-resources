#!/bin/sh
#
# Description:	Directly manages a Mongrel instance as a High-Availability OCF resource
#								agent running on a Heartbeat/LinuxHA cluster.
#
# Author:		Joe Khoobyar <joe@ankhcraft.com>
# License:	GNU General Public License (GPL) version 2
# Copyright (c) 2009 All Rights Reserved
#
#
# See usage() function below for more details...
#
# OCF instance parameters:
#   OCF_RESKEY_mongrel
#   OCF_RESKEY_config
#   OCF_RESKEY_only
#   OCF_RESKEY_monitor_url
#		OCF_RESKEY_options
#   OCF_RESKEY_renice

#######################################################################
# Initialization:

. ${OCF_ROOT:-/usr/lib/ocf}/resource.d/heartbeat/.ocf-shellfuncs
. $(dirname $0)/jk-shellfuncs

#######################################################################

MONGREL_which=$(which mongrel_rails 2>/dev/null)
: ${MONGREL_which=/usr/bin/mongrel_rails}
: ${OCF_RESKEY_mongrel=$MONGREL_which}
: ${OCF_RESKEY_verify_start=1}

usage() {
cat <<END

usage: $0 (start|stop|status|monitor|meta-data|validate-all)

$0 manages Mongrel as an OCF resource.

The 'start' operation starts Mongrel.
The 'stop' operation stops Mongrel.
The 'status' operation reports whether Mongrel is running.
The 'monitor' operation reports whether Mongrel seems to be working.
The 'meta-data' operation reports the configuration options.
The 'validate-all' operation reports whether the parameters are valid.

END
}

meta_data() {
cat <<END
<?xml version="1.0" ?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="Mongrel">
    <version>1.0</version>
      <longdesc lang="en">This is an OCF resource agent for the Mongrel web server</longdesc>
      <shortdesc lang="en">OCF resource agent for Mongrel</shortdesc>
      <parameters>
				<parameter name="mongrel" required="1" unique="0">
					<longdesc lang="en">
						Full path to the Mongrel executable.
					</longdesc>
					<shortdesc>Mongrel executable</shortdesc>
					<content type="string" default="$MONGREL_which"/>
				</parameter>
				<parameter name="config" required="1" unique="0">
					<longdesc lang="en">
						Full path to the Mongrel configuration file for this instance.
					</longdesc>
					<shortdesc>Config file</shortdesc>
					<content type="string" default=""/>
				</parameter>
				<parameter name="only" required="0" unique="1">
					<longdesc lang="en">
						This Mongrel is a member of a mongrel cluster, analogous to
						using the --only flag to the cluster::start mongrel command.
					</longdesc>
					<shortdesc>Only one port</shortdesc>
					<content type="string" default=""/>
				</parameter>
				<parameter name="monitor_url" required="0">
					<longdesc lang="en">
						Optional URL to use for monitoring with wget (OCF_CHECK_LEVEL 10 or above).
					</longdesc>
					<shortdesc>URL to monitor</shortdesc>
					<content type="string" default=""/>
				</parameter>
				<parameter name="monitor_mem" required="0">
					<longdesc lang="en">
						Optional maximum amount of resident memory (OCF_CHECK_LEVEL 10 or above).
					</longdesc>
					<shortdesc>Maximum RSS</shortdesc>
					<content type="string" default=""/>
				</parameter>
				<parameter name="monitor_mem_soft" required="0">
					<longdesc lang="en">
						Optional "soft" maximum amount of resident memory (OCF_CHECK_LEVEL 20 or above).
					</longdesc>
					<shortdesc>Soft maximum RSS</shortdesc>
					<content type="string" default=""/>
				</parameter>
				<parameter name="options" required="0">
					<longdesc lang="en">
						Any additional options to pass to the Mongrel command.
					</longdesc>
					<shortdesc>Extra options</shortdesc>
					<content type="string" default=""/>
				</parameter>
				<parameter name="renice" required="0">
					<longdesc lang="en">
						Optional value to pass to renice Mongrel with after starting it.
					</longdesc>
					<shortdesc>renice value</shortdesc>
					<content type="string" default=""/>
				</parameter>
		</parameters>
    <actions>
      <action name="start" timeout="120s" />
      <action name="stop" timeout="120s" />
      <action name="status" timeout="20s" />
      <action name="monitor" depth="0" start-delay="10s" interval="120s" timeout="30s" />
      <action name="meta-data" timeout="5s" />
      <action name="validate-all" timeout="5s" />
   </actions>
</resource-agent>

END
}

mongrel_yml_to_vars() {
	local key value config="$1"
	[ -z "$config" ] && config="$OCF_RESKEY_config"
	if [ -z "$config" ]; then
		ocf_log err "The 'config' parameter is missing."
		exit $OCF_ERR_ARGS
	fi
	if ! [ -r "$config" ]; then
		ocf_log err "The configuration file $config is missing or unreadable."
		exit $OCF_ERR_ARGS
	fi

	# Read all of the values from YML in a chap manner.
	while IFS=" " read key value; do
		key=${key#:}
		key=${key%:}
		[ "${key:0:1}" = "-" ] && continue
		[ -z "$value" ] || eval "export MONGREL_${key}=${value}"
	done <"$config"

	# Validate some parameters up front.
	if ! [ -z "$MONGREL_servers" ]; then
		MONGREL_only=$OCF_RESKEY_only
		[ -z "$MONGREL_only" ] && MONGREL_only=$((MONGREL_port + OCF_RESKEY_CRM_meta_clone))
		if [ -z "$MONGREL_only" ]; then
			ocf_log err "The resource parameter 'only [PORT-NUMBER]' is required for mongrel clusters"
			exit $OCF_ERR_ARGS
		fi
	elif [ -z "$MONGREL_servers" ]; then
		MONGREL_only=$OCF_RESKEY_only
		MONGREL_servers=$OCF_RESKEY_CRM_meta_clone_max
		if [ -z "$MONGREL_servers" ] && ! [ -z "$MONGREL_only" ]; then
			ocf_log err "The 'only [PORT-NUMBER]' resource parameter can only be used with mongrel clusters"
			exit $OCF_ERR_ARGS
		fi
	fi
	if ! ocf_is_decimal "$MONGREL_port"; then
		ocf_log err "Invalid port setting '$MONGREL_port' in $config"
		exit $OCF_ERR_ARGS
	fi

	# Validate cluster membership a bit up front.
	if ! [ -z "$MONGREL_only" ]; then
		if ! ocf_is_decimal "$MONGREL_servers" || [ $MONGREL_servers -le 0 ]; then
			ocf_log err "Invalid servers setting '$MONGREL_servers' in $config"
			exit $OCF_ERR_ARGS
		fi
		if ! ocf_is_decimal "$MONGREL_only"; then
			ocf_log err "Invalid resource parameter 'only $MONGREL_only'"
			exit $OCF_ERR_ARGS
		fi

		let MONGREL_port_min=$MONGREL_port
		let MONGREL_port_max=$((MONGREL_port + $MONGREL_servers - 1))
		let MONGREL_port=$MONGREL_only

		if [ $MONGREL_only -gt $MONGREL_port_max ] || [ $MONGREL_only -lt $MONGREL_port_min ]; then
			ocf_log err "The resource parameter 'only [PORT-NUMBER]' must be in the range: $MONGREL_port_min - $MONGREL_port_max"
			exit $OCF_ERR_ARGS
		fi

		# Create the "real" port, log_file, pid_file settings from the cluster settings.
		MONGREL_log_file=${MONGREL_log_file%.*}.${MONGREL_port}.${MONGREL_log_file##*.}
		MONGREL_pid_file=${MONGREL_pid_file%.*}.${MONGREL_port}.${MONGREL_pid_file##*.}

		# Differing commands for clustered vs. single mongrels.
		MONGREL_start="$OCF_RESKEY_mongrel cluster::start -C $config --clean --only $MONGREL_port $OCF_RESKEY_options"
		MONGREL_stop="$OCF_RESKEY_mongrel cluster::stop -C $config --clean --only $MONGREL_port $OCF_RESKEY_options"
	else
		MONGREL_start="$OCF_RESKEY_mongrel start -C $config -l $MONGREL_log_file -P $MONGREL_pid_file -c $MONGREL_cwd -r $MONGREL_docroot -d $OCF_RESKEY_options"
		MONGREL_stop="$OCF_RESKEY_mongrel stop -P $MONGREL_pid_file -c $MONGREL_cwd"
	fi

	MONGREL_force_stop="$OCF_RESKEY_mongrel stop -P $MONGREL_pid_file -c $MONGREL_cwd -w 45 -f"
	MONGREL_kill="( cat $MONGREL_pid_file | xargs kill -9 ) && rm -f $MONGREL_pid_file"

	return 0
}

mongrel_validate() {
	[ $MONGREL_PRECHECK -gt 0 ] && exit $MONGREL_PRECHECK
	[ -z "$MONGREL_log_file" ] || jk_assert_writable "$MONGREL_log_file"
	[ -z "$MONGREL_pid_file" ] || jk_assert_writable "$MONGREL_pid_file"
	[ -z "$MONGREL_address" ] || jk_check_ip "$MONGREL_address"
	[ -z "$MONGREL_cwd" ] || jk_assert_directory "$MONGREL_cwd"
  if [ -z "$MONGREL_user" -a -n "$MONGREL_group" ] || [ -z "$MONGREL_group" -a -n "$MONGREL_user" ]; then
		ocf_log err "You can't specify a user without a group or vice-versa in $OCF_RESKEY_config"
		exit $OCF_ERR_CONFIGURED
	fi

	return $OCF_SUCCESS
}

mongrel_status() {
	jk_resource_status_by_pid 'Mongrel' "$MONGREL_pid_file"
}

mongrel_monitor() {
	local retval, maxmem, rssmem
	
	jk_resource_monitor_by_pid 'Mongrel' "$MONGREL_pid_file"; retval=$?
	[ $retval -ne 0 ] && return $retval

	if [ $OCF_CHECK_LEVEL -ge 10 ]; then
		jk_monitor_url || return $OCF_ERR_GENERIC
		jk_monitor_mem_by_pid || return $OCF_ERR_GENERIC
	fi

	return $OCF_SUCCESS
}

mongrel_start() {
	jk_resource_exit_if_started_by_pid 'Mongrel' $MONGREL_pid_file
	jk_resource_start_by_command 'Mongrel' "$MONGREL_start" "$MONGREL_pid_file"
	jk_verify_start_by_pid 'Mongrel' $MONGREL_pid_file
}

mongrel_stop() {
	local retval

	jk_resource_exit_if_stopped_by_pid 'Mongrel' $MONGREL_pid_file

	# Try really hard to kill this mongrel...
	ERRORS=`$MONGREL_stop 2>&1`; retval=$?
	if [ $retval -ne $OCF_SUCCESS ]; then
		ERRORS="$ERRORS -- `$MONGREL_force_stop 2>&1`"; retval=$?
		if [ $retval -ne $OCF_SUCCESS ]; then
			ERRORS="$ERRORS -- `$MONGREL_kill 2>&1`"; retval $?
		fi
	fi

	if [ $retval -ne $OCF_SUCCESS ]; then
		[ -z "$ERRORS" ] && ERRORS="error code $retval"
		ocf_log err "Mongrel failed to stop: $ERRORS"
		return $OCF_ERR_GENERIC
	fi

	return $OCF_SUCCESS
}

# Do this first, in case some settings are bad.
if [ "$1" = "meta-data" ]; then
	meta_data; exit $OCF_SUCCESS
fi

# We always need these before we can do anything else...
jk_check_executable "$OCF_RESKEY_mongrel" &&
	jk_check_readable "$OCF_RESKEY_config" &&
	mongrel_yml_to_vars
MONGREL_PRECHECK=$?

mongrel_precheck() {
	[ $MONGREL_PRECHECK -gt 2 ] && exit ${1:-$OCF_ERR_GENERIC}
}

# What kind of method was invoked?
case "$1" in
  start)	mongrel_validate; mongrel_start;;
  stop)		mongrel_precheck; mongrel_stop;;
  status)	mongrel_precheck; mongrel_status;;
  monitor)	mongrel_precheck $OCF_NOT_RUNNING; mongrel_monitor;;
  validate-all)	mongrel_validate; exit $OCF_SUCCESS;;
  *)		usage; exit $OCF_ERR_UNIMPLEMENTED;;
esac
exit $?
