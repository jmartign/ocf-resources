jk_validate_executable() {
	while [ $# -gt 0 ]; do
		if [ ! -r $1 ]; then
			ocf_log err "$1 is either missing or not executable"
			exit $OCF_ERR_INSTALLED
		fi
		shift
	done
	return 0
}

jk_validate_readable() {
	while [ $# -gt 0 ]; do
		if [ ! -r $1 ]; then
			ocf_log err "$1 is either missing or unreadable"
			exit $OCF_ERR_CONFIGURED
		fi
		shift
	done
	return 0
}

jk_validate_config() {
	local command=$1
	local config=$2
	[ -z "$config" ] && config="$OCF_RESKEY_config"
	[ -z "$config" ] || jk_validate_readable "$config"

	ERRORS=`$command 2>&1`; retval=$?
	if [ $retval -ne $OCF_SUCCESS ]; then
		ocf_log err "Invalid config file: $ERRORS";
		exit $OCF_ERR_CONFIGURED
	fi
	return 0
}


jk_pidfile_prepare() {
	local ownership=$1
	[ -z "$ownership" ] && ownership=$OCF_RESKEY_pid_owner
	[ -z "$ownership" ] || ownership="$ownership:$OCF_RESKEY_pid_group"
	[ -z "$ownership" ] && return 0
	local pidfile=$2
	[ -z "$pidfile" ] && pidfile=$OCF_RESKEY_pid

	if [ -z "$pidfile" ] || ! touch $pidfile; then return 1; fi
	chown $ownership $pidfile || return 2
	chmod 640 $pidfile || return 3
	return 0
}

jk_pidfile_status() {
	local pidfile=$1

	# Missing...
	[ -e $pidfile ] || return 2
	pid=`cat $pidfile`

	# Valid or purgable...
	if [ "u$pid" != "u" ] && ocf_is_decimal $pid; then
		[ -d /proc/$pid ] && return 0
		[ -d /proc/1 ] && return 1
		kill -0 $pid 2>&1 > /dev/null && return 0
	fi

	# Purgable...
	return 1
}

jk_resource_status_by_pid() {
	local retval pidfile=$2
	[ -z "$pidfile" ] && pidfile=$OCF_RESKEY_pid

	jk_pidfile_status $pidfile; retval=$?

	if [ $retval -eq 0 ]; then
		return $OCF_SUCCESS
	elif [ $retval -eq 1 ]; then
		ocf_log debug "$1 not running: removing PID file"
		rm -f $pidfile
	else
		ocf_log debug "$1 is not running"
	fi

	return $OCF_NOT_RUNNING
}

jk_verify_start_by_pid() {
	local retval pidfile=$2
	local waiting=$OCF_RESKEY_verify_start
	[ -z "$pidfile" ] && pidfile=$OCF_RESKEY_pid

	while [ $waiting = 1 ]; do
		jk_pidfile_status $pidfile && return $OCF_SUCCESS

		if [ $retval = 2 -o -z "$pid" ]; then
			ocf_log err "$1 failed to start: $retval"
			return $OCF_NOT_RUNNING
		fi

		sleep 2
	done
	return $OCF_NOT_RUNNING
}

jk_verify_stop_by_pid() {
	local retval pidfile=$2
	local waiting=$OCF_RESKEY_verify_stop
	[ -z "$pidfile" ] && pidfile=$OCF_RESKEY_pid

	while [ $waiting = 1 ]; do
		jk_pidfile_status $pidfile || return $OCF_SUCCESS
		sleep 2
	done
	return $OCF_NOT_RUNNING
}

jk_resource_signal_by_pid() {
	local retval name="$1" signal="$2"
	shift 2
	jk_resource_status_by_pid "$name" "$@"; retval=$?

	if [ $retval -eq 0 ]; then
		[ -z "$signal" ] || signal="-$signal"
		kill $signal $pid; retval=$?
		if [ $retval -ne 0 ]; then
			case "$signal"
			|TERM)
				ocf_log err "$name failed to stop."
				;;
			HUP)
				ocf_log err "$name could not be reloaded."
				;;
			esac
			return $OCF_ERR_GENERIC
		fi
	fi

	return $retval
}

jk_resource_stop_by_pid() {
	local retval name="$1"
	shift
	jk_resource_signal_by_pid "$name" "" "$@"; retval=$?

	[ $retval -eq $OCF_NOT_RUNNING ] && return $OCF_SUCCESS
	return $retval
}
