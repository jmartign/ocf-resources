#!/bin/sh
#
# Description:	Manages an NGINX instance as an OCF High-Availability resource
#								under Heartbeat/LinuxHA control
#
# Author:	Joe Khoobyar
#
# License:	GNU General Public License (GPL)
#
# Copyright (c) 2009 All Rights Reserved
#
# See usage() function below for more details...
#
# OCF instance parameters:
#   OCF_RESKEY_nginx
#   OCF_RESKEY_config
#		OCF_RESKEY_pid
#   OCF_RESKEY_pid_owner
#   OCF_RESKEY_pid_group
#		OCF_RESKEY_options

#######################################################################
# Initialization:

. ${OCF_ROOT:-/usr/lib/ocf}/resource.d/heartbeat/.ocf-shellfuncs

#######################################################################

usage() {
cat <<END

usage: $0 (start|stop|status|monitor|meta-data|validate-all)

$0 manages NGINX as an OCF resource.

The 'start' operation starts NGINX.
The 'stop' operation stops NGINX.
The 'status' operation reports whether NGINX is running.
The 'monitor' operation reports whether NGINX seems to be working.
The 'meta-data' operation reports the configuration options.
The 'validate-all' operation reports whether the parameters are valid.

END
}

meta_data() {
cat <<END

<?xml version="1.0" ?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="NGINX">
    <version>1.0</version>
      <longdesc lang="en">This is an OCF resource agent for the NGINX web server</longdesc>
      <shortdesc lang="en">OCF resource agent for NGINX</shortdesc>
      <parameters>
				<parameter name="nginx" required="1" unique="0">
					<longdesc lang="en">
						Full path to the NGINX executable.
					</longdesc>
					<shortdesc>NGINX executable</shortdesc>
					<content type="string" default="/usr/sbin/nginx"/>
				</parameter>
				<parameter name="config" required="1" unique="1">
					<longdesc lang="en">
						Full path to the NGINX configuration file for this instance.
					</longdesc>
					<shortdesc>Config file</shortdesc>
					<content type="string" default="/etc/nginx/nginx.conf"/>
				</parameter>
				<parameter name="pid" required="1" unique="1">
					<longdesc lang="en">
						Full path to the PID file that this instance should use.
					</longdesc>
					<shortdesc>PID file</shortdesc>
					<content type="string" default="/var/run/nginx.pid"/>
				</parameter>
				<parameter name="pid_owner" required="1">
					<longdesc lang="en">
						User who should own the PID file.
					</longdesc>
					<shortdesc>PID file owner</shortdesc>
					<content type="string" default="nobody"/>
				</parameter>
				<parameter name="pid_group" required="1">
					<longdesc lang="en">
						Group which should own the PID file.
					</longdesc>
					<shortdesc>PID file group</shortdesc>
					<content type="string" default="nobody"/>
				</parameter>
				<parameter name="options" required="0">
					<longdesc lang="en">
						Any additional options to pass to the NGINX command.
					</longdesc>
					<shortdesc>Extra options</shortdesc>
					<content type="string" default=""/>
				</parameter>
				<parameter name="renice" required="0">
					<longdesc lang="en">
						Optional value to pass to renice NGINX with after starting it.
					</longdesc>
					<shortdesc>renice value</shortdesc>
					<content type="string" default=""/>
				</parameter>
		</parameters>
    <actions>
      <action name="start" timeout="30" />
      <action name="stop" timeout="30" />
      <action name="status" timeout="20" />
      <action name="monitor" depth="0" start-delay="10" interval="10" timeout="30" />
      <action name="meta-data" timeout="5" />
      <action name="validate-all" timeout="5" />
   </actions>
</resource-agent>

END
}

NGINX="$OCF_RESKEY_nginx -c $OCF_RESKEY_config $OCF_RESKEY_options"

nginx_validate() {
	if [ ! -x $OCF_RESKEY_nginx ]; then
		ocf_log err "$OCF_RESKEY_nginx is not installed"
		exit $OCF_ERR_INSTALLED
	fi
	if [ ! -r $OCF_RESKEY_config ]; then
		ocf_log err "$OCF_RESKEY_config is either missing or unreadable"
		exit $OCF_ERR_CONFIGURED
	fi

	$NGINX -t; RETVAL=$?

	if [ $RETVAL -ne $OCF_SUCCESS ]; then
		ocf_log err "The configuration file $OCF_RESKEY_config is invalid";
		exit $OCF_ERR_CONFIGURED
	fi

	return $OCF_SUCCESS
}

nginx_status() {
  if [ ! -e $OCF_RESKEY_pid ]; then
		ocf_log debug "NGINX is not running"
		return $OCF_NOT_RUNNING
	fi

	pid=`cat $OCF_RESKEY_pid`
	if [ -d /proc -a -d /proc/1 ]; then
		[ "u$pid" != "u" -a -d /proc/$pid ]
	else
		kill -0 $pid >/dev/null 2>&1
	fi

	if [ $? -eq 0 ]; then
		return $OCF_SUCCESS
	else
		ocf_log debug "NGINX not running: removing old PID file"
		rm -f $OCF_RESKEY_pid
		return $OCF_NOT_RUNNING
	fi
}

nginx_monitor() {
	nginx_status; RETVAL=$?

	[ $OCF_CHECK_LEVEL = 0 -o $RETVAL != 0 ] && return $RETVAL

	# TODO: add some monitoring...

	return $OCF_SUCCESS
}

nginx_prepstart() {
	touch $OCF_RESKEY_pidfile &&
		chown $OCF_RESKEY_owner:$OCF_RESKEY_group $OCF_RESKEY_pidfile &&
		chmod 640 $OCF_RESKEY_pidfile
}

nginx_start() {
	if nginx_status; then
		ocf_log debug "NGINX is already running"
		return $OCF_SUCCESS
	fi

	nginx_prepstart && $NGINX
	RETVAL=$?

	if [ $RETVAL -ne $OCF_SUCCESS ]; then
		ocf_log err "NGINX failed to start: $RETVAL"
		[ $RETVAL -eq $OCF_NOT_RUNNING ] && RETVAL=$OCF_ERR_GENERIC
		return $RETVAL
	else
		[ -z $OCF_RESKEY_renice ] || renice $OCF_RESKEY_renice $OCF_RESKEY_pidfile || true
	fi

	return $OCF_SUCCESS
}

nginx_reload() {
	nginx_status; RETVAL=?
	[ $RETVAL -eq $OCF_NOT_RUNNING ] && return $RETVAL
	if [ $RETVAL -eq 0 ]; then
		kill -HUP $pid; RETVAL=$?
		[ $RETVAL -eq 0 ] || RETVAL=$OCF_ERR_GENERIC
	fi
	return $RETVAL
}

nginx_stop() {
	nginx_status; RETVAL=$?

	[ $RETVAL -eq $OCF_NOT_RUNNING ] && return $OCF_SUCCESS
	if [ $RETVAL -eq 0 ]; then
		kill $pid; RETVAL=$?
	fi
	if [ $RETVAL -ne 0 ]; then
		ocf_log err "NGINX failed to stop: $RETVAL"
		[ $RETVAL -eq $OCF_NOT_RUNNING ] && RETVAL=$OCF_ERR_GENERIC
		return $RETVAL
	fi

	return $OCF_SUCCESS
}

# What kind of method was invoked?
case "$1" in
  start)	nginx_validate; nginx_start;;
  stop)		nginx_stop;;
  status)	nginx_status;;
  reload)	nginx_reload;;
  monitor)	nginx_monitor;;
  meta-data)	meta_data; exit $OCF_SUCCESS;;
  validate-all)	nginx_validate; exit $OCF_SUCCESS;;
  *)		usage; exit $OCF_ERR_UNIMPLEMENTED;;
esac
exit $?
